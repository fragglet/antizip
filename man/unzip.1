.\"  Copyright (c) 1990-2009 Info-ZIP.  All rights reserved.
.\"
.\"  See the accompanying file LICENSE, version 2009-Jan-02 or later
.\"  (the contents of which are also included in unzip.h) for terms of use.
.\"
.\" unzip.1 by Greg Roelofs, Fulvio Marino, Jim van Zandt and others.
.\"
.\" =========================================================================
.\" define .EX/.EE (for multiline user-command examples; normal Courier font)
.de EX
.in +4n
.nf
.ft CW
..
.de EE
.ft R
.fi
.in -4n
..
.\" =========================================================================
.TH UNZIP 1 "20 April 2009 (v6.0)" "Info-ZIP"
.SH NAME
unzip \- list, test and extract compressed files in a ZIP archive
.PD
.SH SYNOPSIS
\fBunzip\fP [\fB\-Z\fP] [\fB\-cflptTuvz\fP[\fBabjnoqsCDKLMUVWX$/:^\fP]]
\fIfile\fP[\fI.zip\fP] [\fIfile(s)\fP\ .\|.\|.]
[\fB\-x\fP\ \fIxfile(s)\fP\ .\|.\|.] [\fB\-d\fP\ \fIexdir\fP]
.PD
.\" =========================================================================
.SH DESCRIPTION
\fIunzip\fP will list, test, or extract files from a ZIP archive, commonly
found on MS-DOS systems. The default behavior (with no options) is to extract
into the current directory (and subdirectories below it) all files from the
specified ZIP archive. A companion program, \fIzip\fP(1), creates ZIP
archives; both programs are compatible with archives created by PKWARE's
\fIPKZIP\fP and \fIPKUNZIP\fP for MS-DOS, but in many cases the program options
or default behaviors differ.
.PD
.\" =========================================================================
.SH ARGUMENTS
.TP
.IR file [ .zip ]
Path of the ZIP archive(s). If the file specification is a wildcard, each
matching file is processed in an order determined by the operating system (or
file system). Only the filename can be a wildcard; the path itself cannot.
Wildcard expressions are similar to those supported in commonly used Unix
shells (\fIsh\fP, \fIksh\fP, \fIcsh\fP) and may contain:
.RS
.IP *
matches a sequence of 0 or more characters
.IP ?
matches exactly 1 character
.IP [.\|.\|.]
matches any single character found inside the brackets; ranges are specified
by a beginning character, a hyphen, and an ending character. If an exclamation
point or a caret (`!' or `^') follows the left bracket, then the range of
characters within the brackets is complemented (that is, anything \fIexcept\fP
the characters inside the brackets is considered a match). To specify a
verbatim left bracket, the three-character sequence ``[[]'' has to be used.
.RE
.IP
(Be sure to quote any character that might otherwise be interpreted or modified
by your shell.) If no matches are found, the specification is assumed to be a
literal filename; and if that also fails, the suffix \fC.zip\fR is appended.
Note that self-extracting ZIP files are supported, as with any other ZIP
archive; just specify the \fC.exe\fR suffix (if any) explicitly.
.IP [\fIfile(s)\fP]
An optional list of archive members to be processed, separated by spaces.
Regular expressions (wildcards) may be used to match multiple members; see
above. Again, be sure to quote expressions that would otherwise be expanded
or modified by the operating system.
.IP [\fB\-x\fP\ \fIxfile(s)\fP]
An optional list of archive members to be excluded from processing. Since
wildcard characters normally match (`/') directory separators (for exceptions
see the option \fB\-W\fP), this option may be used to exclude any files that
are in subdirectories. For example, ``\fCunzip foo *.[ch] -x */*\fR'' would
extract all C source files in the main directory, but none in any
subdirectories. Without the \fB\-x\fP option, all C source files in all
directories within the zipfile would be extracted.
.IP [\fB\-d\fP\ \fIexdir\fP]
An optional directory to which to extract files. By default, all files and
subdirectories are recreated in the current directory; the \fB\-d\fP option
allows extraction in an arbitrary directory (always assuming one has permission
to write to the directory). This option need not appear at the end of the
command line; it is also accepted before the zipfile specification (with the
normal options), immediately after the zipfile specification, or between the
\fIfile(s)\fP and the \fB\-x\fP option. The option and directory may be
concatenated without any white space between them, but note that this may cause
normal shell behavior to be suppressed. In particular, ``\fC\-d\ ~\fR''
(tilde) is expanded by Unix C shells into the name of the user's home
directory, but ``\fC\-d~\fR'' is treated as a literal subdirectory ``\fB~\fP''
of the current directory.
.\" =========================================================================
.SH OPTIONS
Note that, in order to support obsolescent hardware, \fIunzip\fP's usage
screen is limited to 22 or 23 lines and should therefore be considered
only a reminder of the basic \fIunzip\fP syntax rather than an exhaustive
list of all possible flags. The exhaustive list follows:
.TP
.B \-c
extract files to stdout/screen (``CRT''). This option is similar to the
\fB\-p\fP option except that the name of each file is printed as it is
extracted and the \fB\-a\fP option is allowed.
.TP
.B \-f
freshen existing files, i.e., extract only those files that already exist on
disk and that are newer than the disk copies. By default \fIunzip\fP queries
before overwriting, but the \fB\-o\fP option may be used to suppress the
queries. Note that the TZ (timezone) environment variable must be set
correctly in order for \fB\-f\fP and \fB\-u\fP to work properly (the variable
is usually set automatically). The reasons for this are somewhat subtle but
have to do with the differences between DOS-format file times (always local
time) and Unix-format times (always in GMT/UTC) and the necessity to compare
the two. A typical TZ value is ``PST8PDT'' (US Pacific time with automatic
adjustment for Daylight Savings Time or ``summer time'').
.TP
.B \-l
list archive files (short format). The names, uncompressed file sizes and
modification dates and times of the specified files are printed, along
with totals for all files specified.
The zip file comment and individual file comments (if any) are also
displayed. If a file was archived from a single-case file system (for
example, the old MS-DOS FAT file system) and the \fB\-L\fP option was given,
the filename is converted to lowercase and is prefixed with a caret (^).
.TP
.B \-p
extract files to pipe (stdout). Nothing but the file data is sent to
stdout, and the files are always extracted in binary format.
.TP
.B \-t
test archive files. This option extracts each specified file in memory
and compares the CRC (cyclic redundancy check, an enhanced checksum) of
the expanded file with the original file's stored CRC value.
.TP
.B \-T
set the timestamp on the archive(s) to that of the newest file
in each one. This corresponds to \fIzip\fP's \fB\-go\fP option except that
it can be used on wildcard zipfiles (e.g., ``\fCunzip \-T \e*.zip\fR'') and
is much faster.
.TP
.B \-u
update existing files and create new ones if needed. This option performs
the same function as the \fB\-f\fP option, extracting (with query) files
that are newer than those with the same name on disk, and in addition it
extracts those files that do not already exist on disk. See \fB\-f\fP
above for information on setting the timezone properly.
.TP
.B \-v
list archive files (verbose format) or show diagnostic version info.  This
option has evolved and now behaves as both an option and a modifier.  As an
option it has two purposes: when a zipfile is specified with no other options,
\fB\-v\fP lists archive files verbosely, adding to the basic \fB\-l\fP info the
compression method, compressed size, compression ratio and 32-bit CRC. In
contrast to most of the competing utilities, \fIunzip\fP removes the 12
additional header bytes of encrypted entries from the compressed size numbers.
Therefore, compressed size and compression ratio figures are independent of the
entry's encryption status and show the correct compression performance.  As a
modifier it works in conjunction with other options (e.g., \fB\-t\fP) to
produce more verbose or debugging output; this is not yet fully implemented.
.TP
.B \-z
display only the archive comment.
.PD
.\" =========================================================================
.SH MODIFIERS
.TP
.B \-a
convert text files. Ordinarily all files are extracted exactly as they are
stored (as ``binary'' files). The \fB\-a\fP option causes files identified by
\fIzip\fP as text files (those with the `t' label in \fIzipinfo\fP listings,
rather than `b') to be automatically extracted as such, converting line
endings, end-of-file characters and the character set itself as necessary.
(For example, Unix files use line feeds (LFs) for end-of-line (EOL) and have no
end-of-file (EOF) marker; Macintoshes use carriage returns (CRs) for EOLs; and
most PC operating systems use CR+LF for EOLs and control-Z for EOF.
.PP
Note that \fIzip\fP's identification of text files is by no means perfect; some
``text'' files may actually be binary and vice versa. \fIunzip\fP therefore
prints ``\fC[text]\fR'' or ``\fC[binary]\fR'' as a visual check for each file
it extracts when using the \fB\-a\fP option. The \fB\-aa\fP option forces
all files to be extracted as text, regardless of the supposed file type.
.TP
.B \-b
treat all files as binary (no text conversions). This is a shortcut for
\fB\-\-\-a\fP.
.TP
.B \-C
use case-insensitive matching for the selection of archive entries from the
command-line list of extract selection patterns. \fIunzip\fP's philosophy is
``you get what you ask for'' (this is also responsible for the
\fB\-L\fP/\fB\-U\fP change; see the relevant options below). Because some file
systems are fully case-sensitive (particularly on Unix) and because ZIP
archives are portable across platforms, \fIunzip\fP's default behavior is to
match both wildcard and literal filenames case-sensitively. That is,
specifying ``\fCmakefile\fR'' on the command line will \fIonly\fP match
``makefile'' in the archive, not ``Makefile'' or ``MAKEFILE'' (and similarly
for wildcard specifications). Since this does not correspond to the behavior
of many other operating/file systems (for example, OS/2 HPFS, which preserves
mixed case but is not sensitive to it), the \fB\-C\fP option may be used to
force all filename matches to be case-insensitive. In the example above, all
three files would then match ``\fCmakefile\fR'' (or ``\fCmake*\fR'', or
similar). The \fB\-C\fP option affects file specs in both the normal file list
and the excluded-file list (xlist).
.IP
Please note that the \fB\-C\fP option does neither affect the search for
the zipfile(s) nor the matching of archive entries to existing files on
the extraction path. On a case-sensitive file system, \fIunzip\fP will
never try to overwrite a file ``FOO'' when extracting an entry ``foo''!
.TP
.B \-D
skip restoration of timestamps for extracted items. Normally, \fIunzip\fP
tries to restore all meta-information for extracted items that are supplied
in the Zip archive (and do not require privileges or impose a security risk).
By specifying \fB\-D\fP, \fIunzip\fP is told to suppress restoration of
timestamps for directories explicitly created from Zip archive entries.
The duplicated option \fB\-DD\fP forces suppression of timestamp restoration
for all extracted entries (files and directories). This option results in
setting the timestamps for all extracted entries to the current time.
.TP
.B \-j
junk paths. The archive's directory structure is not recreated; all files
are deposited in the extraction directory (by default, the current one).
.TP
.B \-K
retain SUID/SGID/Tacky file attributes. Without this flag, these attribute bits
are cleared for security reasons.
.TP
.B \-L
convert to lowercase any filename originating on an uppercase-only operating
system or file system.
Depending on the archiver, files archived under single-case file systems (old
MS-DOS FAT, etc.) may be stored as all-uppercase names; this can be ugly or
inconvenient when extracting to a case-preserving file system. By default
\fIunzip\fP lists and extracts such filenames exactly as they're stored
(excepting truncation, conversion of unsupported characters, etc.); this option
causes the names of all files from certain systems to be converted to
lowercase. The \fB\-LL\fP option forces conversion of every filename to
lowercase, regardless of the originating file system.
.TP
.B \-n
never overwrite existing files. If a file already exists, skip the extraction
of that file without prompting. By default \fIunzip\fP queries before
extracting any file that already exists; the user may choose to overwrite only
the current file, overwrite all files, skip extraction of the current file,
skip extraction of all existing files, or rename the current file.
.TP
.B \-o
overwrite existing files without prompting. This is a dangerous option, so
use it with care.
.IP \fB\-P\fP\ \fIpassword\fP
use \fIpassword\fP to decrypt encrypted zipfile entries (if any). \fBTHIS IS
INSECURE!\fP Most operating systems provide ways for any user to
see the current command line of any other user; even on stand-alone systems
there is always the threat of over-the-shoulder peeking. Storing the plaintext
password as part of a command line in an automated script is even worse.
Whenever possible, use the non-echoing, interactive prompt to enter passwords.
.TP
.B \-q
perform operations quietly (\fB\-qq\fP = even quieter). Ordinarily \fIunzip\fP
prints the names of the files it's extracting or testing, the extraction
methods, any file or zipfile comments that may be stored in the archive, and
possibly a summary when finished with each archive. The \fB\-q\fP[\fBq\fP]
options suppress the printing of some or all of these messages.
.TP
.B \-U
modify or disable UTF-8 handling. This makes \fIunzip\fP escape all non-ASCII
characters from UTF-8 encoded filenames as ``#Uxxxx'' (for UCS-2 characters, or
``#Lxxxxxx'' for unicode codepoints needing 3 octets).
.TP
.B \-UU
disables recognition of UTF-8 encoded filenames.
.TP
.B \-V
retain (VMS) file version numbers. VMS files can be stored with a version
number, in the format \fCfile.ext;##\fR. By default the ``\fC;##\fR'' version
numbers are stripped, but this option allows them to be retained. (On file
systems that limit filenames to particularly short lengths, the version numbers
may be truncated or stripped regardless of this option.)
.TP
.B \-W
modifies the pattern matching routine so that both `?' (single-char wildcard)
and `*' (multi-char wildcard) do not match the directory separator character
`/'. (The two-character sequence ``**'' acts as a multi-char wildcard that
includes the directory separator in its matched characters.) Examples:
.PP
.EX
    "*.c" matches "foo.c" but not "mydir/foo.c"
    "**.c" matches both "foo.c" and "mydir/foo.c"
    "*/*.c" matches "bar/foo.c" but not "baz/bar/foo.c"
    "??*/*" matches "ab/foo" and "abc/foo"
            but not "a/foo" or "a/b/foo"
.EE
.TP
.B \-X
restore user and group info (UID/GID). In most cases this will require special
system privileges; for example, a user who belongs to several groups can
restore files owned by any of those groups, as long as the user IDs match their
own. File attributes are always restored--this option applies only to to the
user and group fields.
.PP
.TP
.B \-:
allows archive members to be extracted to locations outside of the current ``
extraction root folder''. For security reasons, \fIunzip\fP normally removes
``parent dir'' path components (``../'') from the names of extracted file.
This safety feature prevents \fIunzip\fP from accidentally writing files to
``sensitive'' areas outside the active extraction folder tree head. The
\fB\-:\fP option lets \fIunzip\fP switch back to its previous, more liberal
behaviour, to allow exact extraction of (older) archives that used ``../''
components to create multiple directory trees at the level of the current
extraction folder. This option does not enable writing explicitly to the root
directory (``/''). To achieve this, it is necessary to set the extraction
target folder to root (e.g. \fB\-d / \fP). However, when the \fB\-:\fP option
is specified, it is still possible to implicitly write to the root directory by
specifying enough ``../'' path components within the zip archive.
Use this option with extreme caution.
.TP
.B \-^
allow control characters in names of extracted ZIP archive entries. A file name
may contain any (8-bit) character code with the exception of '/' (directory
delimiter) and NUL (0x00, the C string termination indicator), unless the
specific file system has more restrictive conventions. Generally, this allows
embedding of ASCII control characters (or even sophisticated control sequences)
in file names. However, it is highly suspicious to make use of this Unix
"feature". Embedded control characters in file names might have nasty side
effects when displayed on screen without sufficient filtering. For ordinary
users, it may be difficult to handle such file names (e.g. when trying to
specify it for open, copy, move, or delete operations). Therefore, \fIunzip\fP
applies a filter by default that removes potentially dangerous control
characters from the extracted file names. The \fB-^\fP option allows this
filter to be overridden in the rare case that embedded filename control
characters are to be intentionally restored.
.PD
.\" =========================================================================
.SH "ENVIRONMENT OPTIONS"
\fIunzip\fP's default behavior may be modified via options placed in an
environment variable. This can be done with any option, but it is probably
most useful with the \fB\-a\fP, \fB\-L\fP, \fB\-C\fP, \fB\-q\fP, \fB\-o\fP, or
\fB\-n\fP modifiers. For example, to make \fIunzip\fP act as quietly as
possible, only reporting errors, one would use one of the following commands:
Examples:
.TP
  Unix Bourne shell:
UNZIP=\-qq; export UNZIP
.TP
  Unix C shell:
setenv UNZIP \-qq
.TP
  OS/2 or MS-DOS:
set UNZIP=\-qq
.TP
  VMS (quotes for \fIlowercase\fP):
define UNZIP_OPTS "\-qq"
.PP
Environment options are, in effect, considered to be just like any other
command-line options, except that they are effectively the first options on the
command line. To override an environment option, one may use the ``minus
operator'' to remove it. For instance, to override one of the quiet-flags in
the example above, use the command
.PP
.EX
unzip \-\-q[\fIother options\fP] zipfile
.EE
.PP
The first hyphen is the normal switch character, and the second is a minus
sign, acting on the q option. Thus the effect here is to cancel one quantum of
quietness. To cancel both quiet flags, two (or more) minuses may be used:
.PP
.EX
unzip \-t\-\-q zipfile
unzip \-\-\-qt zipfile
.EE
.PP
(the two are equivalent). This may seem awkward or confusing, but it is
reasonably intuitive: just ignore the first hyphen and go from there. It is
also consistent with the behavior of Unix \fInice\fP(1).
.PP
The timezone variable (TZ) should be set according to the local timezone in
order for the \fB\-f\fP and \fB\-u\fP to operate correctly. See the
description of \fB\-f\fP above for details. This variable may also be
necessary to get timestamps of extracted files to be set correctly.
.PD
.\" =========================================================================
.SH DECRYPTION
Encrypted archives are fully supported by Info-ZIP software;
since spring 2000, US export restrictions
no longer apply.
.PP
The \fB\-P\fP option may be used to supply a password on the command line, but
at a cost in security. The preferred decryption method is simply to extract
normally; if a zipfile member is encrypted, \fIunzip\fP will prompt for the
password without echoing what is typed. \fIunzip\fP continues to use the same
password as long as it appears to be valid, by testing a 12-byte header on each
file. The correct password will always check out against the header, but there
is a 1-in-256 chance that an incorrect password will as well. (This is a
security feature of the PKWARE zipfile format; it helps prevent brute-force
attacks that might otherwise gain a large speed advantage by testing only the
header.) In the case where an incorrect password is given but it passes the
header test anyway, either an incorrect CRC will be generated for the extracted
data or \fIunzip\fP will fail during the extraction because the ``decrypted''
bytes do not constitute a valid compressed data stream.
.PP
If the first password fails the header check on some file, \fIunzip\fP will
prompt for another password, and so on until all files are extracted. If a
password is not known, entering a null password (that is, just a carriage
return or ``Enter'') is taken as a signal to skip all further prompting. Only
unencrypted files in the archive(s) will thereafter be extracted.
.PD
.\" =========================================================================
.SH EXAMPLES
To use \fIunzip\fP to extract all members of the archive \fIletters.zip\fP
into the current directory and subdirectories below it, creating any
subdirectories as necessary:
.PP
.EX
unzip letters
.EE
.PP
To extract all members of \fIletters.zip\fP into the current directory only:
.PP
.EX
unzip -j letters
.EE
.PP
To test \fIletters.zip\fP, printing only a summary message indicating
whether the archive is OK or not:
.PP
.EX
unzip -tq letters
.EE
.PP
To test \fIall\fP zipfiles in the current directory, printing only the
summaries:
.PP
.EX
unzip -tq \e*.zip
.EE
.PP
(The backslash before the asterisk is only required if the shell expands
wildcards, as in Unix; double quotes could have been used instead, as in the
source examples below.)\ \ To extract to standard output all members of
\fIletters.zip\fP whose names end in \fI.tex\fP, auto-converting to the local
end-of-line convention and piping the output into \fImore\fP(1):
.PP
.EX
unzip \-ca letters \e*.tex | more
.EE
.PP
To extract the binary file \fIpaper1.dvi\fP to standard output and pipe it
to a printing program:
.PP
.EX
unzip \-p articles paper1.dvi | dvips
.EE
.PP
To extract all FORTRAN and C source files--*.f, *.c, *.h, and Makefile--into
the /tmp directory:
.PP
.EX
unzip source.zip "*.[fch]" Makefile -d /tmp
.EE
.PP
(the double quotes are necessary only in Unix and only if globbing is turned
on). To extract all FORTRAN and C source files, regardless of case (e.g., both
*.c and *.C, and any makefile, Makefile, MAKEFILE or similar):
.PP
.EX
unzip \-C source.zip "*.[fch]" makefile -d /tmp
.EE
.PP
To extract any such files but convert any uppercase MS-DOS or VMS names to
lowercase and convert the line-endings of all of the files to the local
standard (without respect to any files that might be marked ``binary''):
.PP
.EX
unzip \-aaCL source.zip "*.[fch]" makefile -d /tmp
.EE
.PP
To extract only newer versions of the files already in the current directory,
without querying (NOTE: be careful of unzipping in one timezone a zipfile
created in another--ZIP archives other than those created by Zip 2.1 or later
contain no timezone information, and a ``newer'' file from an eastern timezone
may, in fact, be older):
.PP
.EX
unzip \-fo sources
.EE
.PP
To extract newer versions of the files already in the current directory and to
create any files not already there (same caveat as previous example):
.PP
.EX
unzip \-uo sources
.EE
.PP
To display a diagnostic screen showing which \fIunzip\fP and \fIzipinfo\fP
options are stored in environment variables, whether decryption support was
compiled in, the compiler with which \fIunzip\fP was compiled, etc.:
.PP
.EX
unzip \-v
.EE
.PP
In the last five examples, assume that UNZIP or UNZIP_OPTS is set to -q.
To do a singly quiet listing:
.PP
.EX
unzip \-l file.zip
.EE
.PP
To do a doubly quiet listing:
.PP
.EX
unzip \-ql file.zip
.EE
.PP
(Note that the ``\fC.zip\fR'' is generally not necessary.) To do a standard
listing:
.PP
.EX
unzip \-\-ql file.zip
.EE
or
.EX
unzip \-l\-q file.zip
.EE
or
.EX
unzip \-l\-\-q file.zip
.EE
.\" =========================================================================
.SH DIAGNOSTICS
The exit status (or error level) approximates the exit code returned by PKZIP
and takes on the following values, except under VMS:
.RS
.IP 0
normal; no errors or warnings detected.
.IP 1
one or more warning errors were encountered, but processing completed
successfully anyway. This includes zipfiles where one or more files was
skipped due to unsupported compression method or encryption with an unknown
password.
.IP 2
a generic error in the zipfile format was detected. Processing may have
completed successfully anyway; some broken zipfiles created by other archivers
have simple work-arounds.
.IP 3
a severe error in the zipfile format was detected. Processing probably failed
immediately.
.IP 4
\fIunzip\fP was unable to allocate memory for one or more buffers during
program initialization.
.IP 5
\fIunzip\fP was unable to allocate memory or unable to obtain a tty to read
the decryption password(s).
.IP 6
\fIunzip\fP was unable to allocate memory during decompression to disk.
.IP 7
\fIunzip\fP was unable to allocate memory during in-memory decompression.
.IP 9
the specified zipfiles were not found.
.IP 10
invalid options were specified on the command line.
.IP 11
no matching files were found.
.IP 50
the disk is (or was) full during extraction.
.IP 51
the end of the ZIP archive was encountered prematurely.
.IP 80
the user aborted \fIunzip\fP prematurely with control-C (or similar)
.IP 81
testing or extraction of one or more files failed due to unsupported
compression methods or unsupported decryption.
.IP 82
no files were found due to bad decryption password(s). (If even one file is
successfully processed, however, the exit status is 1.)
.RE
.\" =========================================================================
.SH BUGS
Multi-part archives are not yet supported, except in conjunction with
\fIzip\fP. (All parts must be concatenated together in order, and then
``\fCzip \-F\fR'' (for \fIzip 2.x\fP) or ``\fCzip \-FF\fR'' (for
\fIzip 3.x\fP) must be performed on the concatenated archive in order to
``fix'' it. Also, \fIzip 3.0\fP and later can combine multi-part (split)
archives into a combined single-file archive using ``\fCzip \-s\- inarchive
-O outarchive\fR''. See the \fIzip 3\fP manual page for more information.)
.PP
Archives read from standard input are not supported.
.PP
Archives encrypted with 8-bit passwords (e.g., passwords with accented European
characters) may not be portable across systems and/or other archivers. See the
discussion in \fBDECRYPTION\fP above.
.PP
\fIunzip\fP's \fB\-M\fP (``more'') option tries to take into account automatic
wrapping of long lines. However, the code may fail to detect the correct
wrapping locations. First, TAB characters (and similar control sequences) are
not taken into account, they are handled as ordinary printable characters.
Second, depending on the actual system / OS port, \fIunzip\fP may not detect
the true screen geometry but rather rely on "commonly used" default dimensions.
The correct handling of tabs would require the implementation of a query for
the actual tabulator setup on the output console.
.PP
Unix special files such as FIFO buffers (named pipes), block devices and
character devices are not restored even if they are somehow represented in the
zipfile, nor are hard-linked files relinked. Basically the only file types
restored by \fIunzip\fP are regular files, directories and symbolic (soft)
links.
.PD
.\" =========================================================================
.SH "SEE ALSO"
\fIzip\fP(1)
.PD
.\" =========================================================================
.SH AUTHORS
The primary Info-ZIP authors (current semi-active members of the Zip-Bugs
workgroup) are: Ed Gordon (Zip, general maintenance, shared code, Zip64,
Win32, Unix, Unicode); Christian Spieler (UnZip maintenance coordination,
VMS, MS-DOS, Win32, shared code, general Zip and UnZip integration and
optimization); Onno van der Linden (Zip); Mike White (Win32, Windows GUI,
Windows DLLs); Kai Uwe Rommel (OS/2, Win32); Steven M. Schweda (VMS, Unix,
support of new features); Paul Kienitz (Amiga, Win32, Unicode); Chris
Herborth (BeOS, QNX, Atari); Jonathan Hudson (SMS/QDOS); Sergio Monesi
(Acorn RISC OS); Harald Denker (Atari, MVS); John Bush (Solaris, Amiga);
Hunter Goatley (VMS, Info-ZIP Site maintenance); Steve Salisbury (Win32);
Steve Miller (Windows CE GUI), Johnny Lee (MS-DOS, Win32, Zip64); and Dave
Smith (Tandem NSK).
.PP
The following people were former members of the Info-ZIP development group
and provided major contributions to key parts of the current code:
Greg ``Cave Newt'' Roelofs (UnZip, unshrink decompression);
Jean-loup Gailly (deflate compression);
Mark Adler (inflate decompression, fUnZip).
.PP
The author of the original unzip code upon which Info-ZIP's was based
is Samuel H. Smith; Carl Mascott did the first Unix port; and David P.
Kirschbaum organized and led Info-ZIP in its early days with Keith Petersen
hosting the original mailing list at WSMR-SimTel20. The full list of
contributors to UnZip has grown quite large; please refer to the CONTRIBS
file in the UnZip source distribution for a relatively complete version.
.PD
