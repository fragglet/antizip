.\" Info-ZIP grants permission to any individual or institution to use, copy,
.\" or redistribute this software, so long as:  (1) all of the original files
.\" are included; (2) it is not sold for profit; and (3) this notice is re-
.\" tained.
.\"
.\" unzip.1 by Greg Roelofs, Fulvio Marino, Jim van Zandt and others.
.\"
.\" =========================================================================
.TH UNZIP 1L "7 Feb 94 (v5.1)"
.SH NAME
unzip \- list, test and extract compressed files in a ZIP archive
.\" =========================================================================
.SH SYNOPSIS
\fBunzip\fP [\fB\-Z\fP] [\fB\-cflptuvz\fP[\fBajnoqsUV$\fP]]
\fIfile\fP[\fI.zip\fP] [\fIfile(s)\fP\ .\|.\|.]
[\fB\-x\fP\ \fIxfile(s)\fP\ .\|.\|.] [\fB\-d\fP\ \fIexdir\fP]
.\" =========================================================================
.SH DESCRIPTION
\fIunzip\fP will list, test, or extract files from a ZIP archive, commonly
found on MS-DOS systems.  The default behavior (with no options) is to extract
into the current directory (and subdirectories below it) all files from the 
specified ZIP archive.  A companion program, \fIzip\fP(1L), creates ZIP 
archives; both programs are compatible with PKWARE's PKZIP and PKUNZIP for 
MS-DOS.
.PD
.\" =========================================================================
.SH ARGUMENTS
.TP
.IR file [ .zip ]
Path of the ZIP archive(s).  If the file specification is a wildcard,
each matching file is processed in an order determined by the operating
system (or file system).  Only the filename can be a wildcard; the path
itself cannot.  Wildcard expressions are similar to Unix \fIegrep\fP(1)
(regular) expressions and may contain:
.RS
.IP *
matches a sequence of 0 or more characters
.IP ?
matches exactly 1 character
.IP [.\|.\|.]
matches any single character found inside the brackets; ranges are specified
by a beginning character, a hyphen, and an ending character.  If an exclamation
point or a caret (`!' or `^') follows the left bracket, then the range of 
characters within the brackets is complemented (that is, anything \fIexcept\fP
the characters inside the brackets is considered a match).
.RE
.IP
(Be sure to quote any character which might otherwise be interpreted or
modified by the operating system, particularly under Unix and VMS.)  If no
matches are found, the specification is assumed to be a literal filename; 
and if that also fails, the suffix \fI.zip\fP is appended.  Note that 
self-extracting ZIP files are supported; just specify the \fI.exe\fP suffix
(if any) explicitly.
.IP [\fIfile(s)\fP]
An optional list of archive members to be processed.
Regular expressions (wildcards) may be used to match multiple members; see
above.  Again, be sure to quote expressions that would otherwise be expanded
or modified by the operating system.
.IP [\fB\-x\fP\ \fIxfile(s)\fP]
An optional list of archive members to be excluded from processing.
Since wildcard characters match directory separators (`/'), this option
may be used to exclude any files which are in subdirectories.  For
example, ``unzip foo *.[ch] -x */*'' would extract all C source files
in the main directory, but none in any subdirectories.  Without the \fB\-x\fP
option, all C source files in all directories within the zipfile would be
extracted.
.IP [\fB\-d\fP\ \fIexdir\fP]
An optional directory to which to extract files.  By default, all files
and subdirectories are recreated in the current directory; the \fB\-d\fP
option allows extraction in an arbitrary directory (always assuming one
has permission to write to the directory).  This option need not appear
at the end of the command line; it is also accepted immediately after the
zipfile specification, or between the \fIfile(s)\fP and the \fB\-x\fP
option.
.\" =========================================================================
.SH OPTIONS
.TP
.B \-Z
\fIzipinfo\fP(1) mode.  If the first option on the command line is \fB\-Z\fP,
the remaining options are taken to be \fIzipinfo\fP(1) options.  See the
appropriate manual page for a description of these options.
.TP
.B \-c
extract files to stdout/screen (``CRT'').  This option is similar to the
\fB\-p\fP option except that the name of each file is printed as it is
extracted, the \fB\-a\fP option is allowed, and ASCII-EBCDIC conversion
is automatically performed if appropriate.
.TP
.B \-f
freshen existing files, i.e., extract only those files which
already exist on disk and which are newer than the disk copies.  By
default \fIunzip\fP queries before overwriting, but the \fB\-o\fP option
may be used to suppress the queries.
.TP
.B \-l
list archive files (short format).  The name, uncompressed file size and
modification date and time of each specified file is printed, along
with totals for all files specified.  If a file was archived from a
single-case file system (for example, the MS-DOS FAT file system) and 
the \fB\-U\fP option was not given, the filename is converted to
lowercase and is prefixed with a caret (^).  In addition, the archive
comment and individual file comments (if any) are displayed.
.TP
.B \-p
extract files to pipe (stdout).  Nothing but the file data is sent to
stdout, and the files are always extracted in binary format, just as they
are stored (no conversions).
.TP
.B \-t
test archive files.  This option extracts each specified file in memory
and compares the CRC (cyclic redundancy check, an enhanced checksum) of 
the expanded file with the original file's stored CRC value.
.TP
.B \-u
update existing files and create new ones if needed.  This option performs
the same function as the \fB\-f\fP option, extracting (with query) files
which are newer than those with the same name on disk, and in addition it
extracts those files which do not already exist on disk.
.TP
.B \-v
list archive files (verbose format).  In addition to the information given
by the \fB\-l\fP option, the compression method, compressed size, compression
ratio and 32-bit CRC is listed.
.TP
.B \-z
display only the archive comment.
.PD
.\" =========================================================================
.SH MODIFIERS
.TP
.B \-a
convert text files.  Ordinarily all files are extracted exactly as they
are stored (as ``binary'' files).  The \fB\-a\fP option causes files identified
by \fIzip\fP as text files (those with the `t' label in \fIzipinfo\fP
listings, rather than `b') to be automatically extracted as such, converting
line endings, end-of-file characters and the character set itself as necessary.
(For example, Unix files use line feeds (LFs) for end-of-line (EOL) and
have no end-of-file (EOF) marker; Macintoshes use carriage returns (CRs)
for EOLs; and most PC operating systems use CR+LF for EOLs and control-Z for 
EOF.  In addition, IBM mainframes and the Michigan Terminal System use EBCDIC
rather than the more common ASCII character set, and NT supports Unicode.)
Note that \fIzip\fP's identification of text files is by no means perfect; some
``text'' files may actually be binary and vice versa.  \fIunzip\fP therefore
prints ``[text]'' or ``[binary]'' as a visual check for each file it extracts
when using the \fB\-a\fP option.  The \fB\-aa\fP option forces all files to
be extracted as text, regardless of the supposed file type.
.TP
.B \-j
junk paths.  The archive's directory structure is not recreated; all files
are deposited in the extraction directory (by default, the current one).
.TP
.B \-n
never overwrite existing files.  If a file already exists, skip the extraction
of that file without prompting.  By default \fIunzip\fP queries before
extracting any file which already exists; the user may choose to overwrite
only the current file, overwrite all files, skip extraction of the current
file, skip extraction of all existing files, or rename the current file.
.TP
.B \-o
overwrite existing files without prompting.  This is a dangerous option, so
use it with care.  (It is often used with \fB\-f\fP, however.)
.TP
.B \-q
perform operations quietly (\fB\-qq\fP = even quieter).  Ordinarily \fIunzip\fP
prints the names of the files it's extracting or testing, the extraction
methods, any file or zipfile comments which may be stored in the archive,
and possibly a summary when finished with each archive.  The \fB\-q\fP[\fBq\fP]
options suppress the printing of some or all of these messages.
.TP
.B \-s
[OS/2, NT, MS-DOS] convert spaces in filenames to underscores.  Since all PC
operating systems allow spaces in filenames, \fIunzip\fP by default extracts 
filenames with spaces intact (e.g., ``EA\ DATA.\ SF'').  This can be awkward,
however, since MS-DOS in particular does not gracefully support spaces in 
filenames.  Conversion of spaces to underscores can eliminate the awkwardness
in some cases.
.TP
.B \-U
leave filenames uppercase if created under MS-DOS, VMS, etc.  Depending on
the archiver, files archived under single-case filesystems may be stored as
all-uppercase names; this can be awkward when extracting to a case-preserving
filesystem such as OS/2 HPFS or a case-sensitive one such as under Unix.  By
default \fIunzip\fP converts such filenames to lowercase; this option causes all
filenames to be extracted exactly as they're stored (excepting truncation,
conversion of unsupported characters, etc.).
.TP
.B \-V
retain (VMS) file version numbers.  VMS files can be stored with a version
number, in the format \fIfile.ext;##\fP.  By default the ``;##'' version 
numbers are stripped, but this option allows them to be retained.  (On 
filesystems which limit filenames to particularly short lengths, the version 
numbers may be truncated or stripped regardless of this option.)
.TP
.B \-X
[VMS] restore owner/protection info (may require system privileges).  Ordinary
file attributes are always restored, but this option allows UICs to be restored
as well.  [The next version of \fIunzip\fP will support Unix UID/GID info as 
well, and possibly NT permissions.]
.TP
.B \-$
[MS-DOS, OS/2, NT, Amiga] restore the volume label if the extraction medium is
removable (e.g., a diskette).  Doubling the option (\fB\-$$\fP) allows fixed
media (hard disks) to be labelled as well.  By default, volume labels are
ignored.
.PD
.\" =========================================================================
.SH ENVIRONMENT OPTIONS
\fIunzip\fP's default behavior may be modified via options placed in
an environment variable.  This can be done with any option, but it
is probably most useful with the \fB\-q\fP, \fB\-a\fP, \fB\-o\fP, or \fB\-n\fP
modifiers:  make \fIunzip\fP quieter by default, make it auto-convert text 
files, or make it always overwrite or never overwrite files as it extracts
them.  For example, to make \fIunzip\fP act as quietly as possible, only
reporting errors, one would use one of the following commands:
.LP
.DT
.ta \w'nnn'u +\w'UNZIP=\-qq; export UNZIP'u+3n
.PD 0
.IP "\tUNZIP=\-qq; export UNZIP\tUnix Bourne shell"
.IP "\tsetenv UNZIP \-qq\tUnix C shell"
.IP "\tset UNZIP=\-qq\tOS/2 or MS-DOS"
.IP "\tdefine UNZIP_OPTS ""\-qq""\tVMS (quotes for \fIlowercase\fP)"
.PD
.LP
Environment options are, in effect, considered to be just like any other
command-line options, except that they are effectively the first options
on the command line.  To override an environment option, one may use the
``minus operator'' to remove it.  For instance, to override one of the 
quiet-flags in the example above, use the command
.IP "\tunzip \-\-q[other options] zipfile"
.LP
The first hyphen is the normal
switch character, and the second is a minus sign, acting on the q option.
Thus the effect here is to cancel one quantum of quietness.  To cancel
both quiet flags, two (or more) minuses may be used:
.LP
.PD 0
.IP "\tunzip \-t\-\-q zipfile"
.IP "\tunzip \-\-\-qt zipfile"
.PD
.LP
(the two are equivalent).  This may seem awkward
or confusing, but it is reasonably intuitive:  just ignore the first
hyphen and go from there.  It is also consistent with the behavior of
Unix \fInice\fP(1).
.PD
.\" =========================================================================
.SH EXAMPLES
To use \fIunzip\fP to extract all members of the archive \fIletters.zip\fP
into the current directory and subdirectories below it, creating any
subdirectories as necessary:
.IP "\tunzip letters"
.LP
To extract all members of \fIletters.zip\fP into the current directory only:
.IP "\tunzip -j letters"
.LP
To test \fIletters.zip\fP, printing only a summary message indicating
whether the archive is OK or not:
.IP "\tunzip -tq letters"
.LP
To extract to standard output all members of \fIletters.zip\fP whose names end
in \fI.tex\fP, auto-converting to the local end-of-line convention and piping
the output into \fImore\fP(1):
.IP "\tunzip \-ca letters \e*.tex | more"
.LP
(The backslash before the asterisk is only required if the shell expands
wildcards, as in Unix; double quotes could have been used instead, as in
the source example below.)\ \ To extract the binary file \fIpaper1.dvi\fP to 
standard output and pipe it to a printing program:
.IP "\tunzip \-p articles paper1.dvi | dvips"
.LP
To extract all FORTRAN and C source files--*.f, *.c, *.h, and Makefile--into
the /tmp directory:
.IP "\tunzip source.zip ""*.[fch]"" Makefile -d /tmp"
.LP
(the double quotes are necessary only in Unix and only if globbing is turned
on).  To extract only newer versions of the files already in the current 
directory, without querying (NOTE:  be careful of unzipping in one timezone a 
zipfile created in another--ZIP archives to date contain no timezone 
information, and a ``newer'' file from an eastern timezone may, in fact, be
older):
.IP "\tunzip \-fo sources"
.LP
To extract newer versions of the files already in the current directory and
to create any files not already there (same caveat as previous example):
.IP "\tunzip \-uo sources"
.LP
In the last five examples, assume that UNZIP or UNZIP_OPTS is set to -q.
To do a singly quiet listing:
.IP "\tunzip \-l file"
.LP
To do a doubly quiet listing:
.IP "\tunzip \-ql file"
.LP
To do a standard listing:
.LP
.PD 0
.IP "\tunzip \-\-ql file"
.LP
or
.IP "\tunzip \-l\-q file"
.LP
or
.IP "\tunzip \-l\-\-q file\t(extra minuses don't hurt)"
.PD
.\" =========================================================================
.SH TIPS
The current maintainer, being a lazy sort, finds it very useful to define
a pair of aliases:  \fItt\fP for ``unzip \-tq'' and \fIii\fP for ``unzip \-Z''
(or ``zipinfo'').  One may then simply type ``tt zipfile'' to test an archive,
something which is worth making a habit of doing.  With luck \fIunzip\fP will 
report ``No errors detected in zipfile.zip,'' after which one may breathe a 
sigh of relief.
.PD
.\" =========================================================================
.SH BUGS
[MS-DOS] When extracting or testing files from an archive on a defective
floppy diskette, if the ``Fail'' option is chosen from DOS's ``Abort, Retry,
Fail?'' message, \fIunzip\fP may hang the system, requiring a reboot.  Instead,
press control-C (or control-Break) to terminate \fIunzip\fP.
.LP
Under DEC Ultrix, \fIunzip\fP will sometimes fail on long zipfiles (bad CRC,
not always reproducible).  This is apparently due either to a hardware bug
(cache memory) or an operating system bug (improper handling of page faults?).
.LP
Dates and times of stored directories are not restored.
.LP
[OS/2] Extended attributes for existing directories are never updated.  This
is a limitation of the operating system; \fIunzip\fP has no way to determine
whether the stored attributes are newer or older than the existing ones.
.LP
[VMS] When extracting to another directory, only the \fI[.foo]\fP syntax is
accepted for the \fB\-d\fP option; the simple Unix \fIfoo\fP syntax is
silently ignored (as is the less common VMS \fIfoo.dir\fP syntax).
.LP
[VMS] When the file being extracted already exists, \fIunzip\fP's query only
allows skipping, overwriting or renaming; there should additionally be a 
choice for creating a new version of the file.  In fact, the ``overwrite''
choice does create a new version; the old version is not overwritten or
deleted.
.PD
.\" =========================================================================
.SH SEE ALSO
\fIfunzip\fP(1L), \fIzip\fP(1L), \fIzipcloak\fP(1L), \fIzipgrep\fP(1L),
\fIzipinfo\fP(1L), \fIzipnote\fP(1L), \fIzipsplit\fP(1L)
.PD
.\" =========================================================================
.SH AUTHORS
The primary Info-ZIP authors (current zip-bugs workgroup) are:  Jean-loup
Gailly (Zip), Greg R. Roelofs (UnZip), Mark Adler (decompression, fUnZip), 
Kai Uwe Rommel (OS/2), Igor Mandrichenko (VMS), John Bush and Paul Kienitz
(Amiga), Antoine Verheijen (Macintosh), Chris Herborth (Atari), Henry 
Gessau (NT), and Robert Heath (Windows).  The author of the original unzip 
code upon which Info-ZIP's is based was Samuel H. Smith; Carl Mascott 
did the first Unix port; and David P. Kirschbaum organized and led Info-ZIP
in its early days.  The full list of contributors to UnZip has grown quite
large; please refer to the CONTRIBS file in the UnZip source distribution
for a more complete list.
.PD
.\" =========================================================================
.SH VERSIONS
.ta \w'vx.x\ \ 'u +\w'fall 1989\ \ 'u
.PD 0
.IP "v1.2\t15 Mar 89" \w'\t\t'u
Samuel H. Smith
.IP "v2.0\t\ 9 Sep 89"
Samuel H. Smith
.IP "v2.x\tfall 1989"
many Usenet contributors
.IP "v3.0\t\ 1 May 90"
Info-ZIP (DPK, consolidator)
.IP "v3.1\t15 Aug 90"
Info-ZIP (DPK, consolidator)
.IP "v4.0\t\ 1 Dec 90"
Info-ZIP (GRR, maintainer)
.IP "v4.1\t12 May 91"
Info-ZIP
.IP "v4.2\t20 Mar 92"
Info-ZIP (zip-bugs subgroup; GRR, maint.)
.IP "v5.0\t21 Aug 92"
Info-ZIP (zip-bugs subgroup; GRR, maint.)
.IP "v5.1\t\ 7 Feb 94"
Info-ZIP (zip-bugs subgroup; GRR, maint.)
.PD
