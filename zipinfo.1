.\" Info-ZIP grants permission to any individual or institution to use, copy,
.\" or redistribute this software, so long as:  (1) all of the original files
.\" are included; (2) it is not sold for profit; and (3) this notice is re-
.\" tained.
.\"
.\" zipinfo.1 by Greg Roelofs and others.
.\"
.\" =========================================================================
.\" define the .X macro:
.de X
.nf
.ie n .ti -5
.el \{ .ti +2m
.ps -1 \}
\&\\$1
.ie n .ti +5
.el \{ .ti -2m
.ps +1 \}
.fi
..
.\" =========================================================================
.TH ZIPINFO 1L "7 Feb 94 (v2.0)"
.SH NAME
zipinfo \- list detailed information about a ZIP archive
.\" =========================================================================
.SH SYNOPSIS
\fBzipinfo\fP [\fB\-12smlvhtz\fP] \fIfile\fP[\fI.zip\fP]
[\fIfile(s)\fP\ .\|.\|.] [\fB\-x\fP\ \fIxfile(s)\fP\ .\|.\|.]
.LP
\fBunzip\fP \fB\-Z\fP [\fB\-12smlvhtz\fP] \fIfile\fP[\fI.zip\fP]
[\fIfile(s)\fP\ .\|.\|.] [\fB\-x\fP\ \fIxfile(s)\fP\ .\|.\|.]
.\" =========================================================================
.SH DESCRIPTION
\fIzipinfo\fP lists technical information about files in a ZIP archive, most
commonly found on MS-DOS systems.  Such information includes file access
permissions, encryption status, type of compression, version and operating
system or file system of compressing program, and the like.  The default
behavior (with no options) is 
to list single-line entries for each file in the archive, with header and
trailer lines providing summary information for the entire archive.  The
format is a cross between Unix ``ls \-l'' and ``unzip \-v'' output.  See
.B DETAILED DESCRIPTION
below.  Note that \fIzipinfo\fP is the same program as \fIunzip\fP (under
Unix, a link to it); on some systems, \fIzipinfo\fP support may not have been
compiled in.
.PD
.\" =========================================================================
.SH ARGUMENTS
.TP
.IR file [ .zip ]
Path of the ZIP archive(s).  If the file specification is a wildcard,
each matching file is processed in an order determined by the operating
system (or file system).  Only the filename can be a wildcard; the path
itself cannot.  Wildcard expressions are similar to Unix \fIegrep\fP(1)
(regular) expressions and may contain:
.RS
.IP *
matches a sequence of 0 or more characters
.IP ?
matches exactly 1 character
.IP [.\|.\|.]
matches any single character found inside the brackets; ranges are specified
by a beginning character, a hyphen, and an ending character.  If an exclamation
point or a caret (`!' or `^') follows the left bracket, then the range of 
characters within the brackets is complemented (that is, anything \fIexcept\fP
the characters inside the brackets is considered a match).
.RE
.IP
(Be sure to quote any character which might otherwise be interpreted or
modified by the operating system, particularly under Unix and VMS.)  If no
matches are found, the specification is assumed to be a literal filename; 
and if that also fails, the suffix \fI.zip\fP is appended.  Note that 
self-extracting ZIP files are supported; just specify the \fI.exe\fP suffix
(if any) explicitly.
.IP [\fIfile(s)\fP]
An optional list of archive members to be processed.
Regular expressions (wildcards) may be used to match multiple members; see
above.  Again, be sure to quote expressions that would otherwise be expanded
or modified by the operating system.
.IP [\fB\-x\fP\ \fIxfile(s)\fP]
An optional list of archive members to be excluded from processing.
.\" =========================================================================
.SH OPTIONS
.TP
.B \-1
list filenames only, one per line.  This option excludes all others; headers,
trailers and zipfile comments are never printed.  It is intended for use in
Unix shell scripts.
.TP
.B \-2
list filenames only, one per line, but allow headers (\fB\-h\fP), trailers
(\fB\-t\fP) and zipfile comments (\fB\-z\fP), as well.  This option may be
useful in cases where the stored filenames are particularly long.
.TP
.B \-s
list zipfile info in short Unix ``ls \-l'' format.  This is the default
behavior; see below.
.TP
.B \-m
list zipfile info in medium Unix ``ls \-l'' format.  Identical to the \fB\-s\fP
output, except that the compression factor, expressed as a percentage, is also
listed.
.TP
.B \-l
list zipfile info in long Unix ``ls \-l'' format.  As with \fB\-m\fP except
that the compressed size (in bytes) is printed instead of the compression
ratio.
.TP
.B \-v
list zipfile information in verbose, multi-page format.
.TP
.B \-h
list header line.  The archive name, actual size (in bytes) and total number
of files is printed.
.TP
.B \-t
list totals for files listed or for all files.  The number of files listed,
their uncompressed and compressed total sizes, and their overall compression
factor is printed; or, if only the totals line is being printed, the values
for the entire archive are given.  Note that the total compressed (data)
size will never match the actual zipfile size, since the latter includes all
of the internal zipfile headers in addition to the compressed data.
.PD
.\" =========================================================================
.SH DETAILED DESCRIPTION
.I zipinfo
has a number of modes, and its behavior can be rather difficult to fathom
if one isn't familiar with Unix \fIls\fP(1) (or even if one is).  The default
behavior is to list files in the following format:
.LP
.X "-rw-rws---  1.9 unx    2802 t- defX 11-Aug-91 13:48 perms.2660"
.LP
The last three fields are the modification date and time of
the file, and its name.  The case of the filename is respected; thus
files which come from MS-DOS PKZIP are always capitalized.  If the file
was zipped with a stored directory name, that is also displayed as part
of the filename.
.LP
The second and third fields indicate that the file was zipped under
Unix with version 1.9 of \fIzip\fP.  Since it comes from Unix, the file
permissions at the beginning of the line are printed in Unix format.
The uncompressed file-size (2802 in this example) is the fourth field.
.LP
The fifth field consists of two characters, either of which may take
on several values.  The first character may be either `t' or `b', indicating
that \fIzip\fP believes the file to be text or binary, respectively;
but if the file is encrypted, \fIzipinfo\fP
notes this fact by capitalizing the character (`T' or `B').  The second
character may also take on four values, depending on whether there is
an extended local header and/or an ``extra field'' associated with the
file (explained in PKWare's APPNOTE.TXT).  If neither exists, the character
will be a hyphen (`\-'); if there is an extended local header but no extra
field, `l'; if the reverse, `x'; and if both exist, `X'.  Thus the
file in this example is (probably) a text file, is not encrypted, and
has neither an extra field nor an extended local header associated with it.
The example below, on the other hand, is an encrypted binary file with an 
extra field:
.LP
.X "RWD,R,R     0.9 vms     168 Bx shrk  9-Aug-91 19:15 perms.0644"
.LP
Extra fields are used by PKWARE for authenticity verification and
possibly other purposes, and by Info-ZIP's \fIzip\fP
1.6 and later to store OS/2, Macintosh and VMS file attributes.
This example presumably falls into
the latter class, then.  Note that the file attributes are listed in
VMS format.  Some other possibilities for the host operating system (which
is actually a misnomer; host file system is more correct) include
OS/2 or NT with High Performance File System (HPFS), MS-DOS, OS/2 or NT
with File Allocation Table (FAT) file system, and Macintosh.  These are
denoted as follows:
.sp 1
.PP
.X "-rw-a--     1.0 hpf    5358 Tl i4:3  4-Dec-91 11:33 longfilename.hpfs"
.X "-r--ahs     1.1 fat    4096 b- i4:2 14-Jul-91 12:58 EA DATA. SF"
.X "--w-------  1.0 mac   17357 bx i8:2  4-May-92 04:02 unzip.macr"
.PP
File attributes in the first two cases are indicated in a Unix-like format,
where the seven subfields indicate whether the file:  (1) is a directory,
(2) is readable (always true), (3) is writable, (4) is executable (guessed 
on the basis of the extension--\fI.exe\fP, \fI.com\fP, \fI.bat\fP, \fI.cmd\fP
and \fI.btm\fP files are assumed to be so), (5) has its archive bit set, 
(6) is hidden, and (7) is a system file.  Interpretation of Macintosh file 
attributes is unreliable because some Macintosh archivers don't store any
attributes in the archive.
.PP
Finally, the sixth field indicates
the compression method and possible sub-method used.  There are six methods
known at present:  storing (no compression), reducing, shrinking, imploding,
tokenizing (never publicly released), and deflating.  In addition, there are 
four levels of reducing (1 through 4); four types of imploding (4K or 8K 
sliding dictionary, and 2 or 3 Shannon-Fano trees); and four levels of 
deflating (superfast, fast, normal, maximum compression).  \fIzipinfo\fP
represents these methods and their sub-methods as follows:  \fIstor\fP;
\fIre:1\fP, \fIre:2\fP, etc.; \fIshrk\fP; \fIi4:2\fP, \fIi8:3\fP, etc.;
\fItokn\fP; and \fIdefS\fP, \fIdefF\fP, \fIdefN\fP, and \fIdefX\fP.
.PP
The medium and long listings are almost identical to the short format except 
that they add information on the file's compression.  The medium format lists 
the file's compression factor as a percentage indicating the amount of space
which has been ``removed'':
.PP
.X "-rw-rws---  1.5 unx    2802 t- 81% defX 11-Aug-91 13:48 perms.2660"
.PP
In this example, the file has been compressed by more than a factor of
five; the compressed data are only 19% of the original size.  The long
format gives the compressed file's size in bytes, instead:
.PP
.X "-rw-rws---  1.5 unx    2802 t-     538 defX 11-Aug-91 13:48 perms.2660"
.PP
In addition to individual file information, a default zipfile listing
also includes header and trailer lines:
.PP
.X "Archive:  OS2.zip   5453 bytes   5 files"
.X ",,rw,       1.0 hpf     730 b- i4:3 26-Jun-92 23:40 Contents"
.X ",,rw,       1.0 hpf    3710 b- i4:3 26-Jun-92 23:33 makefile.os2"
.X ",,rw,       1.0 hpf    8753 b- i8:3 26-Jun-92 15:29 os2unzip.c"
.X ",,rw,       1.0 hpf      98 b- stor 21-Aug-91 15:34 unzip.def"
.X ",,rw,       1.0 hpf      95 b- stor 21-Aug-91 17:51 zipinfo.def"
.X "5 files, 13386 bytes uncompressed, 4951 bytes compressed:  63.0%"
.PP
The header line gives the name of the archive, its total size, and the
total number of files; the trailer gives the number of files listed,
their total uncompressed size, and their total compressed size (not
including any of \fIzip\fP's internal overhead).  If, however, one or 
more \fIfile(s)\fP are provided, the header and trailer lines are
not listed.  This behavior is also similar to that of Unix's ``ls \-l'';
it may be overridden by specifying the \-h and \-t options explicitly.
In such a case the listing format must also be specified explicitly,
since \-h or \-t (or both) in the absence of other options implies
that ONLY the header or trailer line (or both) is listed.  See the
\fBEXAMPLES\fP section below for a semi-intelligible translation of this
nonsense.
.PP
The verbose listing is self-explanatory.  It also lists file
comments and the zipfile comment, if any, and the number of
bytes of OS/2 extended attributes stored.  Note that the
latter number will in general NOT match the number given by
OS/2's ``dir'' command; OS/2 always reports the number of
bytes required in 16-bit format, whereas \fIzipinfo\fP
always reports the 32-bit storage.
.PD
.\" =========================================================================
.SH ENVIRONMENT OPTIONS
Modifying \fIzipinfo\fP's default behavior via options placed in
an environment variable can be a bit complicated to explain, due to
\fIzipinfo\fP's attempts to handle various defaults in an intuitive,
yet Unix-like, manner.  (Try not to laugh.)  Nevertheless, there is some 
underlying logic.  In brief, 
there are three ``priority levels'' of options:  the default options;
environment options, which can override or add to the defaults; and 
explicit options given by the user, which can override or add to 
either of the above.
.PP
The default listing format, as noted above, corresponds roughly
to the "zipinfo \-hst" command (except when individual zipfile members
are specified).
A user who prefers the long-listing format (\-l) can make use of the
\fIzipinfo\fP's environment variable to change this default:
.LP
.DT
.ta \w'nnn'u +\w'ZIPINFO=\-l; export ZIPINFO'u+3n
.PD 0
.IP "\tZIPINFO=\-l; export ZIPINFO\tUnix Bourne shell"
.IP "\tsetenv ZIPINFO \-l\tUnix C shell"
.IP "\tset ZIPINFO=\-l\tOS/2 or MS-DOS"
.IP "\tdefine ZIPINFO_OPTS ""\-l""\tVMS (quotes for \fIlowercase\fP)"
.PD
.LP
If, in addition, the user dislikes the trailer line, \fIzipinfo\fP's
concept of ``negative options'' may be used to override the default
inclusion of the line.  This is accomplished by preceding the undesired
option with one or more minuses:  e.g., ``\-l\-t'' or ``\-\-tl'', in this
example.  The first hyphen is the regular switch character, but the one
before the `t' is a minus sign.  The dual use of hyphens may seem a little
awkward, but it's reasonably intuitive nonetheless:  simply ignore the
first hyphen and go from there.  It is also consistent with the behavior
of the Unix command \fInice\fP(1).
.PD
.\" =========================================================================
.SH EXAMPLES
To get a basic, short-format listing of the complete contents of a ZIP 
archive \fIstorage.zip\fP, with both header and totals lines, use only
the archive name as an argument to zipinfo:
.IP "\tzipinfo storage"
.LP
To produce a basic, long-format listing (not verbose), including header and
totals lines, use \-l:
.IP "\tzipinfo \-l storage"
.LP
To list the complete contents of the archive without header and totals
lines, either negate the \-h and \-t options or else specify the contents
explicitly:
.LP
.PD 0
.IP "\tzipinfo \-\-h\-t storage"
.IP "\tzipinfo storage \e*"
.PD
.LP
(where the backslash is required only if the shell would otherwise expand
the `*' wildcard, as in Unix when globbing is turned on--double quotes around
the asterisk would have worked as well).  To turn off the totals line by
default, use the environment variable (C shell is assumed here):
.LP
.PD 0
.IP "\tsetenv ZIPINFO \-\-t"
.IP "\tzipinfo storage"
.PD
.LP
To get the full, short-format listing of the first example again, given
that the environment variable is set as in the previous example, it is
necessary to specify the \-s option explicitly, since the \-t
option by itself implies that ONLY the footer line is to be printed:
.LP
.PD 0
.IP "\tsetenv ZIPINFO \-\-t"
.IP "\tzipinfo \-t storage\t[only totals line]"
.IP "\tzipinfo \-st storage\t[full listing]"
.PD
.LP
The \-s option, like \-m and \-l, includes headers and footers by default,
unless otherwise specified.  Since the environment variable specified no
footers and that has a higher precedence than the default behavior of \-s,
an explicit \-t option was necessary to produce the full listing.  Nothing 
was indicated about the header, however, so the \-s option was sufficient.
Note that both the \-h and \-t options, when used by themselves or with
each other, override any default listing of member files; only the header
and/or footer are printed.  This behavior is useful when \fIzipinfo\fP is
used with a wildcard zipfile specification; the contents of all zipfiles 
are then summarized with a single command.
.LP
To list information on a single file within the archive, in medium format,
specify the filename explicitly:
.IP "\tzipinfo \-m storage unshrink.c"
.LP
The specification of any member file, as in this example, will override
the default header and totals lines; only the single line of information
about the requested file will be printed.  This is intuitively what one
would expect when requesting information about a single file.  For multiple
files, it is often useful to know the total compressed and uncompressed
size; in such cases \-t may be specified explicitly:
.IP "\tzipinfo\fP \-mt storage ""*.[ch]"" Mak\e*"
.LP
Finally, to get maximal information about the ZIP archive, use the verbose 
option.  It is usually wise to pipe the output into a filter such as 
\fImore\fP(1):
.IP "\tzipinfo \-v storage | more"
.PD
.\" =========================================================================
.SH TIPS
The author finds it convenient to define an alias \fIii\fP for \fIzipinfo\fP
on systems which allow aliases (or, on other systems, copy/rename the
executable, create a link or create a command file with the name \fIii\fP).
The \fIii\fP usage parallels the common \fIll\fP alias for long listings in 
Unix, and the similarity between the outputs of the two commands was 
intentional.
.PD
.\" =========================================================================
.SH BUGS
None known at this time, but we're always delighted to find a good one.
.LP
.\" =========================================================================
.SH SEE ALSO
\fIls\fP(1), \fIfunzip\fP(1), \fIunzip\fP(1), \fIzip\fP(1), \fIzipcloak\fP(1),
\fIzipnote\fP(1), \fIzipsplit\fP(1)
.PD
.\" =========================================================================
.SH AUTHOR
Greg Roelofs (a.k.a.\ Cave Newt).  ZipInfo contains pattern-matching
code by Mark Adler, and the OS/2 extra-field code is by Kai Uwe Rommel; many
other have contributed fixes and improvements.  Please refer to the CONTRIBS
file in the UnZip source distribution for a more complete list.
